package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"io"
	"os"

	"github.com/jessepeterson/admgen"
	"gopkg.in/yaml.v3"
)

// Payload represents the "payload" section defined in the Apple
// Device Management YAML.
type Payload struct {
	RequestType string `yaml:"requesttype"`
	Content     string `yaml:"content"`
}

// Command represents an entire MDM command defined in the Apple
// Device Management YAML.
type Command struct {
	Payload      Payload      `yaml:"payload"`
	PayloadKeys  []admgen.Key `yaml:"payloadkeys"`
	ResponseKeys []admgen.Key `yaml:"responsekeys"`
}

func main() {
	var flPkg = flag.String("pkg", "main", "Name of generated package")
	var flOut = flag.String("o", "-", "output filename; \"-\" for stdout")
	flag.Usage = func() {
		fmt.Fprintf(flag.CommandLine.Output(), "Usage: %s [flags] <yaml-file>\n", os.Args[0])
		flag.PrintDefaults()
	}
	flag.Parse()

	if flag.NArg() != 1 {
		// use flag Output() as this error is related to command line input
		fmt.Fprint(flag.CommandLine.Output(), "error: one YAML path required\n")
		flag.Usage()
		os.Exit(1)
	}

	var output io.Writer = os.Stdout
	var err error
	if *flOut != "-" {
		output, err = os.OpenFile(*flOut, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0777)
		if err != nil {
			fmt.Fprintf(os.Stderr, "error opening output file: %v\n", err)
			os.Exit(2)
		}
	}

	f, err := os.Open(flag.Args()[0])
	if err != nil {
		fmt.Fprintf(os.Stderr, "error reading YAML: %v\n", err)
		os.Exit(2)
	}

	cmd := new(Command)

	err = yaml.NewDecoder(f).Decode(cmd)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error decoding YAML: %v\n", err)
		os.Exit(2)
	}

	var decls []ast.Decl

	builder := &admgen.DeclBuilder{Decls: &decls}

	builder.WalkCommand(cmd.PayloadKeys, cmd.Payload.RequestType)
	builder.WalkResponse(cmd.ResponseKeys, cmd.Payload.RequestType)

	file := &ast.File{
		Name:  ast.NewIdent(*flPkg),
		Decls: decls,
		Doc: &ast.CommentGroup{
			List: []*ast.Comment{
				{
					Slash: 1,
					Text:  "// Code generated by \"admgencmd\"; DO NOT EDIT.",
				},
			},
		},
		Package: 2,
	}

	fset := token.NewFileSet()

	// required for the top level package comment to be correctly
	// placed before the package declaration
	// https://github.com/golang/go/issues/18593
	_ = fset.AddFile("", -1, 1)

	err = format.Node(output, fset, file)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error formatting AST node: %v\n", err)
		os.Exit(2)
	}
}
